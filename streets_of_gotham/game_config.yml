---
# :game_dir entry
# valid if directory exists
# defaults to: directory that contains the game_config.yml file
# if loading from string or io object, this must be set explicitly
#:game_dir: "streets_of_gotham"

# :game_name entry
# defaults to: a capitalized, spaced version of the game_dir name
:game_name: Streets Of Gotham

# :game_config_file entry
# defaults to: name of file the config was loaded from.  Not used if loaded from string or IO
:game_config_file: "streets_of_gotham/game_config.yml"

# :game_module_name entry
# valid if: module exists
# defaults to: game_name upper_camelcased
#:game_module_name: StreetsOfGotham

# :game_class_name entry
# valid if: class exists in module of :game_module_name
# defaults to Game
#:game_class_name: Game

# :component_definitions entry detailed version
# contains a list of entries detailing the name, a config_file, maker name, and class name
#:component_definitions
#- :name: Board
#  :config_file: etc/board.yml
#  :maker_module: BoardMaker
#  :class: Board

# :component_definitions entry basic version
# contains a list of names of components.  Each component name will be expanded into a hash as follows
# if GamePart is the name listed...
# the resulting data
#:component_definitions
#- Board
#- ChallengeDeck
# Becomes
#:component_definitions
#- :name: Board
#  :config_file: etc/board.yml
#  :maker: BoardMaker
#  :class: Board
#- :name: ChallengeDeck
#  :config_file: etc/challenge_deck.yml
#  :maker: ChallengeDeckMaker
#  :class: ChallengeDeck

# :component_definitions will default to scanning the game_dir/etc directory for *.yml files
# and will construct a list and expand as the entry basic version

# :components entry
# has one sub-key named for each component_definition name that will be an hash or an array.
# data loaded from the config_file will be appended to the array or merged with the existing hash.

